// Copyright 2025 The excelize Authors. All rights reserved. Use of this source
// code is governed by a BSD-style license that can be found in the LICENSE
// file.
//
// Package excelize-cs is a C# port of Go Excelize library, providing a set of
// functions that allow you to write and read from XLAM / XLSM / XLSX / XLTM /
// XLTX files. Supports reading and writing spreadsheet documents generated by
// Microsoft Excelâ„¢ 2007 and later. Supports complex components by high
// compatibility, and provided streaming API for generating or reading data from
// a worksheet with huge amounts of data. This library needs .NET version 6, C#
// version 10 or later.

using System.Runtime.InteropServices;

namespace ExcelizeCs.TypesC
{
    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Interface
    {
        public int Type;
        public int Integer;
        public sbyte* String;
        public double Float;

        [MarshalAs(UnmanagedType.I1)]
        public bool Boolean;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Options
    {
        public uint MaxCalcIterations;
        public sbyte* Password;

        [MarshalAs(UnmanagedType.I1)]
        public bool RawCellValue;
        public long UnzipSizeLimit;
        public long UnzipXMLSizeLimit;
        public sbyte* TmpDir;
        public sbyte* ShortDatePattern;
        public sbyte* LongDatePattern;
        public sbyte* LongTimePattern;
        public byte CultureInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Border
    {
        public sbyte* Type;
        public sbyte* Color;
        public int Style;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Fill
    {
        public sbyte* Type;
        public int Pattern;
        public int ColorLen;
        public sbyte** Color;
        public int Shading;
        public int Transparency;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Font
    {
        [MarshalAs(UnmanagedType.I1)]
        public bool Bold;

        [MarshalAs(UnmanagedType.I1)]
        public bool Italic;

        public sbyte* Underline;
        public sbyte* Family;
        public double Size;

        [MarshalAs(UnmanagedType.I1)]
        public bool Strike;

        public sbyte* Color;
        public int ColorIndexed;
        public int* ColorTheme;
        public double ColorTint;
        public sbyte* VertAlign;
        public int* Charset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Alignment
    {
        public sbyte* Horizontal;
        public int Indent;

        [MarshalAs(UnmanagedType.I1)]
        public bool JustifyLastLine;

        public uint ReadingOrder;
        public int RelativeIndent;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShrinkToFit;

        public int TextRotation;
        public sbyte* Vertical;

        [MarshalAs(UnmanagedType.I1)]
        public bool WrapText;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Protection
    {
        [MarshalAs(UnmanagedType.I1)]
        public bool Hidden;

        [MarshalAs(UnmanagedType.I1)]
        public bool Locked;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Style
    {
        public int BorderLen;
        public Border* Border;
        public Fill Fill;
        public Font* Font;
        public Alignment* Alignment;
        public Protection* Protection;
        public int NumFmt;
        public int* DecimalPlaces;
        public sbyte** CustomNumFmt;

        [MarshalAs(UnmanagedType.I1)]
        public bool NegRed;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct GraphicOptions
    {
        public sbyte* AltText;
        public bool* PrintObject;
        public bool* Locked;

        [MarshalAs(UnmanagedType.I1)]
        public bool LockAspectRatio;

        [MarshalAs(UnmanagedType.I1)]
        public bool AutoFit;

        [MarshalAs(UnmanagedType.I1)]
        public bool AutoFitIgnoreAspect;
        public int OffsetX;
        public int OffsetY;
        public double ScaleX;
        public double ScaleY;
        public sbyte* Hyperlink;
        public sbyte* HyperlinkType;
        public sbyte* Positioning;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Picture
    {
        public sbyte* Extension;
        public int FileLen;
        public byte* File;
        public GraphicOptions* Format;
        public byte InsertType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RichTextRun
    {
        public Font* Font;
        public sbyte* Text;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Comment
    {
        public sbyte* Author;
        public int AuthorID;
        public sbyte* Cell;
        public sbyte* Text;
        public uint Width;
        public uint Height;
        public int ParagraphLen;
        public RichTextRun* Paragraph;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ChartNumFmt
    {
        public sbyte* CustomNumFmt;

        [MarshalAs(UnmanagedType.I1)]
        public bool SourceLinked;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ChartAxis
    {
        [MarshalAs(UnmanagedType.I1)]
        public bool None;

        [MarshalAs(UnmanagedType.I1)]
        public bool MajorGridLines;

        [MarshalAs(UnmanagedType.I1)]
        public bool MinorGridLines;
        public double MajorUnit;
        public byte TickLabelPosition;
        public int TickLabelSkip;

        [MarshalAs(UnmanagedType.I1)]
        public bool ReverseOrder;

        [MarshalAs(UnmanagedType.I1)]
        public bool Secondary;
        public double* Maximum;
        public double* Minimum;
        public Alignment Alignment;
        public Font Font;
        public double LogBase;
        public ChartNumFmt NumFmt;
        public int TitleLen;
        public RichTextRun* Title;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ChartDataLabel
    {
        public Alignment Alignment;
        public Font Font;
        public Fill Fill;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ChartDimension
    {
        public uint Width;
        public uint Height;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ChartLine
    {
        public byte Type;
        public byte Dash;
        public Fill Fill;

        [MarshalAs(UnmanagedType.I1)]
        public bool Smooth;
        public double Width;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ChartUpDownBar
    {
        public Fill Fill;
        public ChartLine Border;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ChartPlotArea
    {
        public int SecondPlotValues;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowBubbleSize;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowCatName;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowDataTable;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowDataTableKeys;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowLeaderLines;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowPercent;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowSerName;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowVal;
        public Fill Fill;
        public ChartUpDownBar UpBars;
        public ChartUpDownBar DownBars;
        public ChartNumFmt NumFmt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ChartLegend
    {
        public sbyte* Position;

        [MarshalAs(UnmanagedType.I1)]
        public bool ShowLegendKey;
        public Font* Font;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ChartMarker
    {
        public ChartLine Border;
        public Fill Fill;
        public sbyte* Symbol;
        public int Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ChartSeries
    {
        public sbyte* Name;
        public sbyte* Categories;
        public sbyte* Values;
        public sbyte* Sizes;
        public Fill Fill;
        public ChartLegend Legend;
        public ChartLine Line;
        public ChartMarker Marker;
        public ChartDataLabel DataLabel;
        public byte DataLabelPosition;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Chart
    {
        public byte Type;
        public int SeriesLen;
        public ChartSeries* Series;
        public GraphicOptions Format;
        public ChartDimension Dimension;
        public ChartLegend Legend;
        public int TitleLen;
        public RichTextRun* Title;

        public bool* VaryColors;
        public ChartAxis XAxis;
        public ChartAxis YAxis;
        public ChartPlotArea PlotArea;
        public Fill Fill;
        public ChartLine Border;
        public sbyte* ShowBlanksAs;
        public int BubbleSize;
        public int HoleSize;
        public uint* GapWidth;
        public int* Overlap;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct StringErrorResult
    {
        public sbyte* val;
        public sbyte* err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IntErrorResult
    {
        public int val;
        public sbyte* err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct CellNameToCoordinatesResult
    {
        public int col;
        public int row;
        public sbyte* err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct Row
    {
        public int CellLen;
        public sbyte** Cell;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct GetRowsResult
    {
        public int RowLen;
        public Row* Row;
        public sbyte* err;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct GetStyleResult
    {
        public Style style;
        public sbyte* err;
    }
}
