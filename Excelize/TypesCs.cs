// Copyright 2025 The excelize Authors. All rights reserved. Use of this source
// code is governed by a BSD-style license that can be found in the LICENSE
// file.
//
// Package excelize-cs is a C# port of Go Excelize library, providing a set of
// functions that allow you to write and read from XLAM / XLSM / XLSX / XLTM /
// XLTX files. Supports reading and writing spreadsheet documents generated by
// Microsoft Excelâ„¢ 2007 and later. Supports complex components by high
// compatibility, and provided streaming API for generating or reading data from
// a worksheet with huge amounts of data. This library needs .NET version 6, C#
// version 10 or later.

#nullable enable

namespace ExcelizeCs
{
    /// <summary>
    /// This section defines the currently supported country code types
    /// enumeration for apply number format.
    /// </summary>
    public enum CultureName : byte
    {
        CultureNameUnknown = 0,
        CultureNameEnUS = 1,
        CultureNameJaJP = 2,
        CultureNameKoKR = 3,
        CultureNameZhCN = 4,
        CultureNameZhTW = 5,
    }

    /// <summary>
    /// This section defines the cell value types enumeration.
    /// </summary>
    public enum CellType : byte
    {
        CellTypeUnset = 0,
        CellTypeBool = 1,
        CellTypeDate = 2,
        CellTypeError = 3,
        CellTypeFormula = 4,
        CellTypeInlineString = 5,
        CellTypeNumber = 6,
        CellTypeSharedString = 7,
    }

    /// <summary>
    /// FormControlType is the type of supported form controls.
    /// </summary>
    public enum FormControlType : byte
    {
        FormControlNote = 0,
        FormControlButton = 1,
        FormControlOptionButton = 2,
        FormControlSpinButton = 3,
        FormControlCheckBox = 4,
        FormControlGroupBox = 5,
        FormControlLabel = 6,
        FormControlScrollBar = 7,
    }

    /// <summary>
    /// ChartDashType defines the currently supported chart dash types
    /// enumeration.
    /// </summary>
    public enum ChartDashType : byte
    {
        ChartDashUnset = 0,
        ChartDashSolid = 1,
        ChartDashDot = 2,
        ChartDashDash = 3,
        ChartDashLgDash = 4,
        ChartDashSashDot = 5,
        ChartDashLgDashDot = 6,
        ChartDashLgDashDotDot = 7,
        ChartDashSysDash = 8,
        ChartDashSysDot = 9,
        ChartDashSysDashDot = 10,
        ChartDashSysDashDotDot = 11,
    }

    /// <summary>
    /// ChartLineType defines the currently supported chart line types
    /// enumeration.
    /// </summary>
    public enum ChartLineType : byte
    {
        ChartLineUnset = 0,
        ChartLineSolid = 1,
        ChartLineNone = 2,
        ChartLineAutomatic = 3,
    }

    /// <summary>
    /// ChartType defines the currently supported chart types enumeration.
    /// </summary>
    public enum ChartType : byte
    {
        Area = 0,
        AreaStacked = 1,
        AreaPercentStacked = 2,
        Area3D = 3,
        Area3DStacked = 4,
        Area3DPercentStacked = 5,
        Bar = 6,
        BarStacked = 7,
        BarPercentStacked = 8,
        Bar3DClustered = 9,
        Bar3DStacked = 10,
        Bar3DPercentStacked = 11,
        Bar3DConeClustered = 12,
        Bar3DConeStacked = 13,
        Bar3DConePercentStacked = 14,
        Bar3DPyramidClustered = 15,
        Bar3DPyramidStacked = 16,
        Bar3DPyramidPercentStacked = 17,
        Bar3DCylinderClustered = 18,
        Bar3DCylinderStacked = 19,
        Bar3DCylinderPercentStacked = 20,
        Col = 21,
        ColStacked = 22,
        ColPercentStacked = 23,
        Col3D = 24,
        Col3DClustered = 25,
        Col3DStacked = 26,
        Col3DPercentStacked = 27,
        Col3DCone = 28,
        Col3DConeClustered = 29,
        Col3DConeStacked = 30,
        Col3DConePercentStacked = 31,
        Col3DPyramid = 32,
        Col3DPyramidClustered = 33,
        Col3DPyramidStacked = 34,
        Col3DPyramidPercentStacked = 35,
        Col3DCylinder = 36,
        Col3DCylinderClustered = 37,
        Col3DCylinderStacked = 38,
        Col3DCylinderPercentStacked = 39,
        Doughnut = 40,
        Line = 41,
        Line3D = 42,
        Pie = 43,
        Pie3D = 44,
        PieOfPie = 45,
        BarOfPie = 46,
        Radar = 47,
        Scatter = 48,
        Surface3D = 49,
        WireframeSurface3D = 50,
        Contour = 51,
        WireframeContour = 52,
        Bubble = 53,
        Bubble3D = 54,
        StockHighLowClose = 55,
        StockOpenHighLowClose = 56,
    }

    /// <summary>
    /// ChartDataLabelPositionType is the type of chart data labels position.
    /// enumeration.
    /// </summary>
    public enum ChartDataLabelPositionType : byte
    {
        ChartDataLabelsPositionUnset = 0,
        ChartDataLabelsPositionBestFit = 1,
        ChartDataLabelsPositionBelow = 2,
        ChartDataLabelsPositionCenter = 3,
        ChartDataLabelsPositionInsideBase = 4,
        ChartDataLabelsPositionInsideEnd = 5,
        ChartDataLabelsPositionLeft = 6,
        ChartDataLabelsPositionOutsideEnd = 7,
        ChartDataLabelsPositionRight = 8,
        ChartDataLabelsPositionAbove = 9,
    }

    /// <summary>
    /// ChartTickLabelPositionType is the type of supported chart tick label
    /// enumeration.
    /// </summary>
    public enum ChartTickLabelPositionType : byte
    {
        ChartTickLabelNextToAxis = 0,
        ChartTickLabelHigh = 1,
        ChartTickLabelLow = 2,
        ChartTickLabelNone = 3,
    }

    /// <summary>
    /// PictureInsertType defines the type of the picture has been inserted into
    /// the worksheet.
    /// </summary>
    public enum PictureInsertType : byte
    {
        PictureInsertTypePlaceOverCells = 0,
        PictureInsertTypePlaceInCell = 1,
        PictureInsertTypeIMAGE = 2,
        PictureInsertTypeDISPIMG = 3,
    }

    /// <summary>
    ///
    /// </summary>
    public struct Interface
    {
        public int Type;
        public int Integer;
        public string String;
        public double Float;
        public bool Boolean;
    }

    /// <summary>
    /// Options define the options for opening and reading the spreadsheet.
    /// </summary>
    public struct Options
    {
        public uint MaxCalcIterations;
        public string Password;
        public bool RawCellValue;
        public long UnzipSizeLimit;
        public long UnzipXMLSizeLimit;
        public string TmpDir;
        public string ShortDatePattern;
        public string LongDatePattern;
        public string LongTimePattern;
        public CultureName CultureInfo;
    }

    /// <summary>
    /// Alignment directly maps the alignment settings of the cells.
    /// </summary>
    public struct Alignment
    {
        public string Horizontal;
        public int Indent;
        public bool JustifyLastLine;
        public uint ReadingOrder;
        public int RelativeIndent;
        public bool ShrinkToFit;
        public int TextRotation;
        public string Vertical;
        public bool WrapText;
    }

    /// <summary>
    /// Border directly maps the border settings of the cells.
    /// </summary>
    public struct Border
    {
        public string Type;
        public string Color;
        public int Style;
    }

    /// <summary>
    /// Font directly maps the font settings of the fonts.
    /// </summary>
    public struct Font
    {
        public bool Bold;
        public bool Italic;
        public string Underline;
        public string Family;
        public double Size;
        public bool Strike;
        public string Color;
        public int ColorIndexed;
        public int? ColorTheme;
        public double ColorTint;
        public string VertAlign;
        public int? Charset;
    }

    /// <summary>
    /// Fill directly maps the fill settings of the cells.
    /// </summary>
    public struct Fill
    {
        public string Type;
        public int Pattern;
        public string[]? Color;
        public int Shading;
        public int Transparency;
    }

    /// <summary>
    /// Protection directly maps the protection settings of the cells.
    /// </summary>
    public struct Protection
    {
        public bool Locked;
        public bool Hidden;
    }

    /// <summary>
    /// Style directly maps the style settings of the cells.
    /// </summary>
    public struct Style
    {
        public Border[]? Border;
        public Fill Fill;
        public Font? Font;
        public Alignment? Alignment;
        public Protection? Protection;
        public int NumFmt;
        public int? DecimalPlaces;
        public string? CustomNumFmt;
        public bool NegRed;
    }

    /// <summary>
    /// GraphicOptions directly maps the format settings of the picture.
    /// </summary>
    public struct GraphicOptions
    {
        public string AltText;
        public bool? PrintObject;
        public bool? Locked;
        public bool LockAspectRatio;
        public bool AutoFit;
        public bool AutoFitIgnoreAspect;
        public int OffsetX;
        public int OffsetY;
        public double ScaleX;
        public double ScaleY;
        public string Hyperlink;
        public string HyperlinkType;
        public string Positioning;
    }

    /// <summary>
    /// Picture maps the format settings of the picture.
    /// </summary>
    public struct Picture
    {
        public string Extension;
        public byte[]? File;
        public GraphicOptions? Format;
        public PictureInsertType InsertType;
    }

    /// <summary>
    /// RichTextRun directly maps the settings of the rich text run.
    /// </summary>
    public struct RichTextRun
    {
        public Font? Font;
        public string Text;
    }

    /// <summary>
    /// Comment directly maps the comment information.
    /// </summary>
    public struct Comment
    {
        public string Author;
        public int AuthorID;
        public string Cell;
        public string Text;
        public uint Width;
        public uint Height;
        public RichTextRun[]? Paragraph;
    }

    /// <summary>
    /// ChartNumFmt directly maps the number format settings of the chart.
    /// </summary>
    public struct ChartNumFmt
    {
        public string CustomNumFmt;
        public bool SourceLinked;
    }

    /// <summary>
    /// ChartAxis directly maps the format settings of the chart axis.
    /// </summary>
    public struct ChartAxis
    {
        public bool None;
        public bool MajorGridLines;
        public bool MinorGridLines;
        public double MajorUnit;
        public ChartDataLabelPositionType TickLabelPosition;
        public int TickLabelSkip;
        public bool ReverseOrder;
        public bool Secondary;
        public double? Maximum;
        public double? Minimum;
        public Alignment Alignment;
        public Font Font;
        public double LogBase;
        public ChartNumFmt NumFmt;
        public RichTextRun[]? Title;
    }

    /// <summary>
    /// ChartDataLabel directly maps the format settings of the chart labels.
    /// </summary>
    public struct ChartDataLabel
    {
        public Alignment Alignment;
        public Font Font;
        public Fill Fill;
    }

    /// <summary>
    /// ChartDimension directly maps the dimension of the chart.
    /// </summary>
    public struct ChartDimension
    {
        public uint Width;
        public uint Height;
    }

    /// <summary>
    /// ChartLine directly maps the format settings of the chart line.
    /// </summary>
    public struct ChartLine
    {
        public ChartLineType Type;
        public ChartDashType Dash;
        public Fill Fill;

        public bool Smooth;
        public double Width;
    }

    /// <summary>
    /// ChartUpDownBar directly maps the format settings of the stock chart up
    /// bars and down bars.
    /// </summary>
    public struct ChartUpDownBar
    {
        public Fill Fill;
        public ChartLine Border;
    }

    /// <summary>
    /// ChartPlotArea directly maps the format settings of the plot area.
    /// </summary>
    public struct ChartPlotArea
    {
        public int SecondPlotValues;
        public bool ShowBubbleSize;
        public bool ShowCatName;
        public bool ShowDataTable;
        public bool ShowDataTableKeys;
        public bool ShowLeaderLines;
        public bool ShowPercent;
        public bool ShowSerName;
        public bool ShowVal;
        public Fill Fill;
        public ChartUpDownBar UpBars;
        public ChartUpDownBar DownBars;
        public ChartNumFmt NumFmt;
    }

    /// <summary>
    /// ChartLegend directly maps the format settings of the chart legend.
    /// </summary>
    public struct ChartLegend
    {
        public string Position;
        public bool ShowLegendKey;
        public Font? Font;
    }

    /// <summary>
    /// ChartMarker directly maps the format settings of the chart marker.
    /// </summary>
    public struct ChartMarker
    {
        public ChartLine Border;
        public Fill Fill;
        public string Symbol;
        public int Size;
    }

    /// <summary>
    /// ChartSeries directly maps the format settings of the chart series.
    /// </summary>
    public struct ChartSeries
    {
        public string Name;
        public string Categories;
        public string Values;
        public string Sizes;
        public Fill Fill;
        public ChartLegend Legend;
        public ChartLine Line;
        public ChartMarker Marker;
        public ChartDataLabel DataLabel;
        public ChartDataLabelPositionType DataLabelPosition;
    }

    /// <summary>
    /// Chart directly maps the format settings of the chart.
    /// </summary>
    public struct Chart
    {
        public ChartType Type;
        public ChartSeries[]? Series;
        public GraphicOptions Format;
        public ChartDimension Dimension;
        public ChartLegend Legend;
        public RichTextRun[]? Title;
        public bool? VaryColors;
        public ChartAxis XAxis;
        public ChartAxis YAxis;
        public ChartPlotArea PlotArea;
        public Fill Fill;
        public ChartLine Border;
        public string ShowBlanksAs;
        public int BubbleSize;
        public int HoleSize;
        public uint? GapWidth;
        public int? Overlap;
    }

    public struct Row
    {
        public string[]? Cell;
    }

    public struct GetRowsResult
    {
        public Row[]? Row;
    }
}
