// Copyright 2025 The excelize Authors. All rights reserved. Use of this source
// code is governed by a BSD-style license that can be found in the LICENSE
// file.
//
// Package excelize-cs is a C# port of Go Excelize library, providing a set of
// functions that allow you to write and read from XLAM / XLSM / XLSX / XLTM /
// XLTX files. Supports reading and writing spreadsheet documents generated by
// Microsoft Excelâ„¢ 2007 and later. Supports complex components by high
// compatibility, and provided streaming API for generating or reading data from
// a worksheet with huge amounts of data. This library needs .NET version 6, C#
// version 10 or later.

namespace ExcelizeCs.Tests;

using System.Runtime.InteropServices;
using Xunit;

public class UnitTest
{
    [Fact]
    public void TestDllImportResolver()
    {
        var err = Assert.Throws<RuntimeError>(() => Lib.DllImportResolver("lib", null, null));
        Assert.Equal(Lib.ErrUnsupportedPlatformOrArch, err.Message);
    }

    [Fact]
    public void TestStyle()
    {
        var f = Excelize.NewFile();
        var s = new Style
        {
            Border = new Border[]
            {
                new()
                {
                    Type = "left",
                    Color = "0000FF",
                    Style = 3,
                },
                new()
                {
                    Type = "right",
                    Color = "FF0000",
                    Style = 6,
                },
                new()
                {
                    Type = "top",
                    Color = "00FF00",
                    Style = 4,
                },
                new()
                {
                    Type = "bottom",
                    Color = "FFFF00",
                    Style = 5,
                },
                new()
                {
                    Type = "diagonalUp",
                    Color = "A020F0",
                    Style = 8,
                },
                new()
                {
                    Type = "diagonalDown",
                    Color = "A020F0",
                    Style = 8,
                },
            },
            Font = new Font
            {
                Bold = true,
                Size = 11.5,
                Italic = true,
                Strike = true,
                Color = "FFF000",
                Underline = "single",
                Family = "Times New Roman",
                ColorIndexed = 6,
                ColorTheme = 1,
                ColorTint = 0.11,
                VertAlign = "superscript",
            },
            Fill = new Fill
            {
                Shading = 1,
                Color = new string[] { "00FF00", "FFFF00" },
                Type = "gradient",
            },
            Alignment = new Alignment
            {
                Horizontal = "center",
                Indent = 1,
                JustifyLastLine = true,
                ReadingOrder = 1,
                RelativeIndent = 1,
                ShrinkToFit = true,
                TextRotation = 180,
                Vertical = "center",
                WrapText = true,
            },
            Protection = new Protection { Locked = false, Hidden = true },
            CustomNumFmt = ";;;",
        };
        var styleId = f.NewStyle(s);
        Assert.Equal(1, styleId);
        var style = f.GetStyle(styleId);
        Assert.Equivalent(s, style);

        Assert.Null(Record.Exception(() => f.SetCellStyle("Sheet1", "A1", "B2", styleId)));
        Assert.Null(Record.Exception(() => f.UpdateLinkedValue()));
        Assert.Null(Record.Exception(() => f.SetCellInt("Sheet1", "A1", 100)));

        List<object?> arr = new()
        {
            null,
            "Hello",
            100,
            123.45,
            true,
            (float)123,
            (long)12345,
            (short)12,
        };
        arr.ForEach(v =>
            Assert.Null(
                Record.Exception(() =>
                {
                    f.SetCellValue(
                        "Sheet1",
                        Excelize.CoordinatesToCellName(1, arr.IndexOf(v) + 2),
                        v
                    );
                })
            )
        );
        Assert.Null(
            Record.Exception(() =>
            {
                f.SetActiveSheet(f.NewSheet("Sheet2"));
            })
        );
        Assert.Null(
            Record.Exception(() =>
            {
                Assert.Equal("100", f.GetCellValue("Sheet1", "A4"));
            })
        );
        Assert.Equal(
            new List<List<string>>
            {
                new() { },
                new() { },
                new() { "Hello" },
                new() { "100" },
                new() { "123.45" },
                new() { "TRUE" },
                new() { "123" },
                new() { "12345" },
                new() { "12" },
            },
            f.GetRows("Sheet1")
        );
        Assert.Null(Record.Exception(() => f.SaveAs("Book1.xlsx")));
        Assert.Empty(f.Close());

        var err = Assert.Throws<RuntimeError>(() => Excelize.CoordinatesToCellName(0, 1));
        Assert.Equal("invalid cell reference [0, 1]", err.Message);

        f = new File(0);
        var expected = "can not find file pointer";
        err = Assert.Throws<RuntimeError>(() => f.AddChart("Sheet1", "A1", new Chart()));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.AddChartSheet("Sheet1", new Chart()));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.AddComment("Sheet1", new Comment()));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() =>
            f.AddPictureFromBytes("Sheet1", "A1", new Picture())
        );
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.AddVBAProject(Array.Empty<byte>()));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.GetCellValue("Sheet1", "A1"));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.GetRows("Sheet1"));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.GetStyle(1));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.NewSheet("Sheet1"));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.NewStyle(s));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.Save());
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.SetActiveSheet(1));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.SetCellStyle("Sheet1", "A1", "B2", styleId));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.SetCellInt("Sheet1", "A1", 100));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.SetCellValue("Sheet1", "A1", 100));
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() =>
            f.SetSheetRow("Sheet1", "A1", new List<object> { 1 })
        );
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.UpdateLinkedValue());
        Assert.Equal(expected, err.Message);
        err = Assert.Throws<RuntimeError>(() => f.SaveAs("Book1.xlsx"));
        Assert.Equal(expected, err.Message);
        Assert.Equal(expected, f.Close());
    }

    [Fact]
    public void TestAddChart()
    {
        var f = Excelize.NewFile();
        var data = new List<List<object?>>
        {
            new() { null, "Apple", "Orange", "Pear" },
            new() { "Small", 2, 3, 3 },
            new() { "Normal", 5, 2, 4 },
            new() { "Large", 6, 7, 8 },
        };
        Assert.Null(Record.Exception(() => f.SetSheetRow("Sheet1", "A1", null)));
        Assert.Null(Record.Exception(() => f.SetSheetRow("Sheet1", "A1", new List<object>())));
        foreach (var row in data)
        {
            Assert.Null(
                Record.Exception(() =>
                    f.SetSheetRow(
                        "Sheet1",
                        Excelize.CoordinatesToCellName(1, data.IndexOf(row) + 1),
                        row
                    )
                )
            );
        }
        var chart = new Chart
        {
            Type = ChartType.Col3DClustered,
            Series = new ChartSeries[]
            {
                new()
                {
                    Name = "Sheet1!$A$2",
                    Categories = "Sheet1!$B$1:$D$1",
                    Values = "Sheet1!$B$2:$D$2",
                },
                new()
                {
                    Name = "Sheet1!$A$3",
                    Categories = "Sheet1!$B$1:$D$1",
                    Values = "Sheet1!$B$3:$D$3",
                },
                new()
                {
                    Name = "Sheet1!$A$4",
                    Categories = "Sheet1!$B$1:$D$1",
                    Values = "Sheet1!$B$4:$D$4",
                },
            },
            Title = new RichTextRun[] { new() { Text = "Fruit 3D Clustered Column Chart" } },
        };
        Assert.Null(
            Record.Exception(() =>
            {
                f.AddChart("Sheet1", "E1", chart);
                f.AddChart("Sheet1", "E16", chart, chart);
                f.AddChart("Sheet1", "E31", chart, null);
                f.AddChart("Sheet1", "E46", chart, Array.Empty<Chart>());
                f.AddChartSheet("Sheet2", chart);
                f.AddChartSheet("Sheet3", chart, chart);
                f.AddChartSheet("Sheet4", chart, null);
                f.AddChartSheet("Sheet5", chart, Array.Empty<Chart>());
            })
        );
        Assert.Null(Record.Exception(() => f.SaveAs("TestAddChart.xlsx")));
        Assert.Empty(f.Close());
    }

    [Fact]
    public void TestAddComment()
    {
        var f = Excelize.NewFile();
        var comment = new Comment
        {
            Cell = "A5",
            Author = "Excelize",
            Paragraph = new RichTextRun[]
            {
                new()
                {
                    Text = "Excelize: ",
                    Font = new Font { Bold = true },
                },
                new() { Text = "This is a comment." },
            },
            Height = 40,
            Width = 180,
        };
        Assert.Null(
            Record.Exception(() =>
            {
                f.AddComment("Sheet1", null);
                f.AddComment("Sheet1", comment);
                f.SaveAs("TestComment.xlsx");
            })
        );
        Assert.Empty(f.Close());
    }

    [Fact]
    public void TestAddPicture()
    {
        var f = Excelize.NewFile();
        string filePath = Path.GetFullPath(Path.Combine("..", "..", "..", "..", "chart.png"));
        var pic = System.IO.File.ReadAllBytes(filePath);
        Assert.Null(
            Record.Exception(() =>
            {
                f.AddPicture("Sheet1", "A1", filePath, null);
                f.AddPicture(
                    "Sheet1",
                    "A1",
                    filePath,
                    new GraphicOptions
                    {
                        PrintObject = true,
                        ScaleX = 0.1,
                        ScaleY = 0.1,
                        Locked = false,
                    }
                );
                f.AddPictureFromBytes(
                    "Sheet1",
                    "A3",
                    new Picture
                    {
                        Extension = ".png",
                        File = pic,
                        Format = new GraphicOptions
                        {
                            PrintObject = true,
                            ScaleX = 0.1,
                            ScaleY = 0.1,
                            Locked = false,
                        },
                        InsertType = PictureInsertType.PictureInsertTypePlaceOverCells,
                    }
                );
                f.SaveAs("TestAddPicture.xlsx");
            })
        );
        var err = Assert.Throws<RuntimeError>(() => f.AddPicture("SheetN", "A1", filePath, null));
        Assert.Equal("sheet SheetN does not exist", err.Message);
        Assert.Empty(f.Close());
    }

    [Fact]
    public void TestAddFormControl()
    {
        var f = Excelize.NewFile();
        Assert.Null(
            Record.Exception(() =>
            {
                f.AddVBAProject(
                    System.IO.File.ReadAllBytes(
                        Path.GetFullPath(Path.Combine("..", "..", "..", "vbaProject.bin"))
                    )
                );
                f.SaveAs("TestAddFormControl.xlsm");
            })
        );
        Assert.Empty(f.Close());
    }

    [Fact]
    public void TestCoordinates()
    {
        var (col, row) = Excelize.CellNameToCoordinates("Z3");
        Assert.Equal((26, 3), (col, row));
        var err = Assert.Throws<RuntimeError>(() => Excelize.CellNameToCoordinates("A"));
        Assert.Equal(
            "cannot convert cell \"A\" to coordinates: invalid cell name \"A\"",
            err.Message
        );
        Assert.Equal(26, Excelize.ColumnNameToNumber(Excelize.ColumnNumberToName(26)));
        err = Assert.Throws<RuntimeError>(() => Excelize.ColumnNameToNumber("-"));
        Assert.Equal("invalid column name \"-\"", err.Message);
        err = Assert.Throws<RuntimeError>(() => Excelize.ColumnNumberToName(0));
        Assert.Equal(
            "the column number must be greater than or equal to 1 and less than or equal to 16384",
            err.Message
        );
    }

    [Fact]
    public void TestOpenFile()
    {
        Assert.Null(
            Record.Exception(() =>
            {
                var opt = new Options { Password = "password" };
                var f = Excelize.NewFile();
                f.UpdateLinkedValue();
                f.SaveAs("Book2.xlsx", opt);
                f.Close();
                f = Excelize.OpenFile("Book2.xlsx", opt);
                f.Save();
                f.Close();
                var f2 = Excelize.OpenReader(System.IO.File.ReadAllBytes("Book2.xlsx"));
                f2.Close();
            })
        );
        var err = Assert.Throws<RuntimeError>(() => Excelize.OpenFile("Book1"));
        Assert.StartsWith("open Book1", err.Message);
        err = Assert.Throws<RuntimeError>(() =>
            Excelize.OpenReader(
                System.IO.File.ReadAllBytes(
                    Path.GetFullPath(Path.Combine("..", "..", "..", "..", "chart.png"))
                )
            )
        );
        Assert.Equal("zip: not a valid zip file", err.Message);
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct C1
    {
        public int ALen;
        public int* A;
        public int BLen;
        public int* B;
        public int CLen;
        public sbyte** C;
        public int DLen;
        public TypesC.Interface* D;
        public double* E;
        public float* F;
        public long* G;
        public short* H;
        public byte* I;
        public uint* J;
        public ulong* K;
        public ushort* L;
        public sbyte** M;
        public bool* N;
    }

    public struct CsT1
    {
        public int[]? A;
        public int?[]? B;
        public string?[]? C;
        public Interface?[]? D;
        public double? E;
        public float? F;
        public long? G;
        public short? H;
        public byte? I;
        public uint? J;
        public ulong? K;
        public ushort? L;
        public string? M;
        public bool? N;
    }

    [Fact]
    public unsafe void TestTypeConvert()
    {
        var expected = new CsT1
        {
            A = new int[] { 1, 2 },
            B = new int?[] { 3, 4, null },
            C = new string?[] { "a", "b" },
            D = new Interface?[]
            {
                new Interface { Type = 0, Integer = 100 },
                null,
            },
            E = 123.45,
            F = 12.3f,
            G = 123456,
            H = 123,
            I = 12,
            J = 123U,
            K = 123456UL,
            L = 123,
            M = "text",
            N = true,
        };
        var cT1 = (C1)Lib.CsToC(expected, new C1());
        var csT1 = (CsT1)Lib.CToCs(cT1, new CsT1());
        Assert.Equivalent(expected, csT1);
        Assert.Null(Lib.CsToC(null, new CsT1()));
        Assert.Null(Lib.CToCs(null, new C1()));
        sbyte value = -42;
        IntPtr intPtr = (IntPtr)(&value);
        Assert.Null(Lib.UnmarshalPrimitiveValue(intPtr, typeof(string)));
    }
}
